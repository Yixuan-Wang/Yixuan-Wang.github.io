{"version":3,"sources":["webpack:///./src/components/Chip.js","webpack:///./src/components/ArticleFront.js","webpack:///./src/templates/post.js","webpack:///./src/components/SEO.js"],"names":["Chip","children","className","ArticleFront","article","frontmatter","title","date","category","tags","keywords","time","style","marginBottom","marginTop","marginRight","color","fontWeight","to","map","tag","key","keyword","Post","post","data","markdownRemark","type","dangerouslySetInnerHTML","__html","html","SEO","description","lang","meta","site","useStaticQuery","metaDescription","siteMetadata","siteTitle","htmlAttributes","name","content","property","withPrefix","concat","defaultProps"],"mappings":"+KAIe,SAASA,EAAT,GAA6B,IAAbC,EAAY,EAAZA,SAC7B,OAAO,0BAAMC,UAAU,QAAQD,GCAlB,SAASE,EAAT,GAAoC,IAAD,IAAXC,QACqBC,YAAlDC,EADwC,EACxCA,MAAOC,EADiC,EACjCA,KAAMC,EAD2B,EAC3BA,SAAUC,EADiB,EACjBA,KAAMC,EADW,EACXA,SAC/BC,EACJ,8BACGJ,GAOL,OACE,oCACE,wBAAIK,MAAO,CAAEC,aAAc,MAAQP,GACnC,uBAAGM,MAAO,CAAEE,UAAW,SACrB,0BAAMF,MAAO,CAAEG,YAAa,QAAUJ,GACtC,0BAAMC,MAAO,CAAEI,MAAO,gBAAiBC,WAAY,SACjD,kBAACjB,EAAD,KACE,kBAAC,OAAD,CAAMkB,GAAE,oBAAsBV,GAAaA,KAG/C,8BACGC,aADH,EACGA,EAAMU,KAAI,SAAAC,GAAG,OACZ,kBAACpB,EAAD,CAAMqB,IAAKD,GACT,kBAAC,OAAD,CAAMF,GAAE,oBAAsBV,GAA9B,IAA+CY,QAIrD,0BAAMR,MAAO,CAAEI,MAAO,kBACnBN,aADH,EACGA,EAAUS,KAAI,SAAAG,GAAO,OACpB,kBAACtB,EAAD,CAAMqB,IAAKC,GAAX,IAAyBA,W,oCCnCrC,gGAMe,SAASC,EAAT,GAAyB,IAChCC,EAD+B,EAARC,KACXC,eAElB,OACE,oCACE,kBAAC,IAAD,CAAKpB,MAAOkB,EAAKnB,YAAYC,MAAOqB,KAAK,YACzC,kBAAC,IAAD,CAAcvB,QAASoB,IACvB,6BAASI,wBAAyB,CAAEC,OAAQL,EAAKM,W,kCCbvD,iDAYA,SAASC,EAAT,GAAwD,IAAzCJ,EAAwC,EAAxCA,KAAMK,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAM5B,EAAS,EAATA,MACpC6B,EAASC,yBAAe,YAAxBD,KAcFE,EAAkBL,GAAeG,EAAKG,aAAaN,YACnDO,EAAYJ,EAAKG,aAAahC,MAEpC,OACE,kBAAC,SAAD,CACEkC,eAAgB,CACdP,QAEF3B,MAAOA,EAAWA,EAAN,MAAiBiC,EAAcA,EAC3CL,KAAM,CACJ,CACEO,KAAK,cACLC,QAASL,GAEX,CACEM,SAAS,WACTD,QAASpC,GAEX,CACEqC,SAAS,iBACTD,QAASL,GAEX,CACEM,SAAS,UACTD,QAASf,GAEX,CACEgB,SAAS,eACTD,QAASH,GAEX,CACEI,SAAS,WACTD,QAASE,qBAAW,eAEtBC,OAAOX,KAKfH,EAAIe,aAAe,CACjBb,KAAK,UACLC,KAAM,GACNF,YAAY,GACZL,KAAK,UACLrB,MAAM,IAUOyB,O","file":"component---src-templates-post-js-40c00523c78941ed6e54.js","sourcesContent":["import React from 'react';\n\nimport '../styles/components/chip.scss';\n\nexport default function Chip({ children }) {\n  return <span className=\"chip\">{children}</span>;\n}\n","import { Link } from 'gatsby';\nimport React from 'react';\n\nimport Chip from '../components/Chip';\n\nexport default function ArticleFront({ article }) {\n  const { title, date, category, tags, keywords } = article.frontmatter;\n  const time = (\n    <span>\n      {date}\n      {/* {post.frontmatter.date == post.fields.modifiedTime\n        ? ''\n        : ` â†’ ${post.fields.modifiedTime}`} */}\n    </span>\n  );\n\n  return (\n    <>\n      <h1 style={{ marginBottom: '0' }}>{title}</h1>\n      <p style={{ marginTop: '.5em' }}>\n        <time style={{ marginRight: '1em' }}>{time}</time>\n        <span style={{ color: 'var(--clr-ac)', fontWeight: 'bold' }}>\n          <Chip>\n            <Link to={`../../categories/${category}`}>{category}</Link>\n          </Chip>\n        </span>\n        <span>\n          {tags?.map(tag => (\n            <Chip key={tag}>\n              <Link to={`../../categories/${category}`}>{`@${tag}`}</Link>\n            </Chip>\n          ))}\n        </span>\n        <span style={{ color: 'var(--clr-dm)' }}>\n          {keywords?.map(keyword => (\n            <Chip key={keyword}>{`#${keyword}`}</Chip>\n          ))}\n        </span>\n      </p>\n    </>\n  );\n}\n","import React from 'react';\nimport { graphql } from 'gatsby';\n\nimport SEO from '../components/SEO';\nimport ArticleFront from '../components/ArticleFront';\n\nexport default function Post({ data }) {\n  const post = data.markdownRemark;\n\n  return (\n    <>\n      <SEO title={post.frontmatter.title} type=\"article\" />\n      <ArticleFront article={post} />\n      <article dangerouslySetInnerHTML={{ __html: post.html }} />\n    </>\n  );\n}\n\nexport const query = graphql`\n  query($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      frontmatter {\n        title\n        date(formatString: \"YYYY/MM/DD\")\n        category\n        tags\n        keywords\n      }\n      fields {\n        modifiedTime(formatString: \"YYYY/MM/DD\")\n      }\n    }\n  }\n`;\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from 'react-helmet';\nimport { useStaticQuery, graphql, withPrefix } from 'gatsby';\n\nfunction SEO({ type, description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `,\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n  const siteTitle = site.siteMetadata.title;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title ? `${title} | ${siteTitle}` : siteTitle}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: type,\n        },\n        {\n          property: `og:site-name`,\n          content: siteTitle,\n        },\n        {\n          property: `og:image`,\n          content: withPrefix('/icon.png'),\n        },\n      ].concat(meta)}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  lang: `zh-Hans`,\n  meta: [],\n  description: ``,\n  type: `webpage`,\n  title: ``,\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n"],"sourceRoot":""}