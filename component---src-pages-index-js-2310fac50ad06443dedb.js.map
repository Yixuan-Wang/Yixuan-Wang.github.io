{"version":3,"sources":["webpack://pak/./src/components/Chip.js","webpack://pak/./src/components/ArticleMeta.js","webpack://pak/./src/components/CardFriend.js","webpack://pak/./src/components/SEO.js","webpack://pak/./src/components/CardArticle.js","webpack://pak/./src/pages/index.js"],"names":["Chip","children","className","time","taxonomies","category","tags","keywords","style","display","marginRight","color","fontWeight","Link","to","map","tag","key","keyword","friend","name","avatar","link","blog","href","target","rel","src","SEO","type","description","lang","meta","title","site","useStaticQuery","metaDescription","siteMetadata","siteTitle","htmlAttributes","content","property","withPrefix","concat","defaultProps","CardArticle","article","frontmatter","date","padding","margin","fields","slug","paddingBottom","excerpt","ArticleMeta","data","id","recents","nodes","sheets","friends","childYaml","CardFriend"],"mappings":"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","file":"component---src-pages-index-js-2310fac50ad06443dedb.js","sourcesContent":["import React from 'react';\n\nimport '../styles/components/chip.scss';\n\nexport default function Chip({ children }) {\n  return <span className=\"chip\">{children}</span>;\n}\n","import React from 'react';\nimport { Link } from 'gatsby';\nimport PropTypes from 'prop-types';\n\nimport Chip from '../components/Chip';\n\nfunction ArticleMeta({ className, time, taxonomies }) {\n  const { category, tags, keywords } = taxonomies;\n\n  return (\n    <span className={className} style={{ display: 'inline-block' }}>\n      <time style={{ marginRight: '1em' }}>{time}</time>\n      <span style={{ color: 'var(--clr-ac)', fontWeight: 'bold' }}>\n        <Chip>\n          <Link to={`/categories/${category}`}>{category}</Link>\n        </Chip>\n      </span>\n      <span>\n        {tags?.map(tag => (\n          <Chip key={tag}>\n            <Link to={`/categories/${category}#${tag}`}>{`@${tag}`}</Link>\n          </Chip>\n        ))}\n      </span>\n      <span style={{ color: 'var(--clr-dm)' }}>\n        {keywords?.map(keyword => (\n          <Chip key={keyword}>{`#${keyword}`}</Chip>\n        ))}\n      </span>\n    </span>\n  );\n}\n\nArticleMeta.propTypes = {\n  time: PropTypes.string,\n  taxonomies: PropTypes.shape({\n    category: PropTypes.string,\n    tags: PropTypes.arrayOf(PropTypes.string),\n    keywords: PropTypes.arrayOf(PropTypes.string),\n  }),\n};\n\nexport default ArticleMeta;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport '../styles/components/card-friend.scss';\n\nfunction CardFriend({ friend }) {\n  const { name, avatar, link, blog } = friend;\n\n  return (\n    <div className=\"card-friend\">\n      <a\n        className=\"card-friend-link\"\n        href={link}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        <img className=\"card-friend-avatar\" src={avatar} />\n      </a>\n      <a\n        className=\"card-friend-name\"\n        href={blog}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        {name}\n      </a>\n    </div>\n  );\n}\n\nCardFriend.propTypes = {\n  friend: PropTypes.shape({\n    name: PropTypes.string,\n    avatar: PropTypes.string,\n    link: PropTypes.string,\n    blog: PropTypes.string,\n  }),\n};\n\nexport default CardFriend;\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from 'react-helmet';\nimport { useStaticQuery, graphql, withPrefix } from 'gatsby';\n\nfunction SEO({ type, description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `,\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n  const siteTitle = site.siteMetadata.title;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title ? `${title} | ${siteTitle}` : siteTitle}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: type,\n        },\n        {\n          property: `og:site-name`,\n          content: siteTitle,\n        },\n        {\n          property: `og:image`,\n          content: withPrefix('/icon.png'),\n        },\n      ].concat(meta)}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  lang: `zh-Hans`,\n  meta: [],\n  description: ``,\n  type: `webpage`,\n  title: ``,\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n","import React from 'react';\nimport { Link } from 'gatsby';\n\nimport ArticleMeta from '../components/ArticleMeta';\n\nexport default function CardArticle({ article }) {\n  const { title, date, category, tags, keywords } = article.frontmatter;\n  const time = date;\n\n  return (\n    <section style={{ padding: '.25em .5em' }}>\n      <h3 style={{ margin: '0' }}>\n        <Link to={`/${article.fields.slug}`}>{title}</Link>\n      </h3>\n      <p style={{ margin: '0', paddingBottom: '.333em' }}>{article.excerpt}</p>\n      <ArticleMeta time={time} taxonomies={{ category, tags, keywords }} />\n    </section>\n  );\n}\n","import React from 'react';\nimport { graphql, Link } from 'gatsby';\n\nimport '../styles/pages/index.scss';\n\nimport SEO from '../components/SEO';\nimport CardArticle from '../components/CardArticle';\nimport CardFriend from '../components/CardFriend';\n\nexport const query = graphql`\n  fragment Article on MarkdownRemark {\n    id\n    excerpt\n    fields {\n      slug\n    }\n    frontmatter {\n      tags\n      keywords\n      title\n      category\n      date(formatString: \"YYYY/MM/DD\")\n    }\n  }\n  query QueryIndex {\n    site {\n      siteMetadata {\n        title\n        description\n      }\n    }\n    recents: allMarkdownRemark(\n      limit: 10\n      filter: { fields: { quarter: { in: [\"posts\", \"talks\"] } } }\n      sort: { fields: frontmatter___date, order: DESC }\n    ) {\n      nodes {\n        ...Article\n      }\n    }\n    sheets: allMarkdownRemark(\n      limit: 3\n      filter: { fields: { quarter: { eq: \"sheets\" } } }\n      sort: { fields: frontmatter___date, order: DESC }\n    ) {\n      nodes {\n        ...Article\n      }\n    }\n    friends: issues(title: { eq: \"friends\" }) {\n      ...Friends\n    }\n  }\n`;\n\nconst IndexPage = ({ data }) => {\n  const { siteMetadata } = data.site;\n  return (\n    <>\n      <SEO title=\"\" />\n      <h1 className=\"title\">{siteMetadata.title}</h1>\n      <p className=\"subtitle description\">{siteMetadata.description}</p>\n      <section className=\"index-block\">\n        <h2 id=\"recents\">文章和言论</h2>\n        {data.recents.nodes.map(article => (\n          <CardArticle key={article.id} article={article} />\n        ))}\n        <span className=\"index-link-more\">\n          <Link to=\"/posts/\">全部文章…</Link>\n        </span>\n        <span className=\"index-link-more\">\n          <Link to=\"/talks/\">全部言论…</Link>\n        </span>\n      </section>\n      <section className=\"index-block\">\n        <h2 id=\"recent-sheets\">清单</h2>\n        {data.sheets.nodes.map(article => (\n          <CardArticle key={article.id} article={article} />\n        ))}\n        <span className=\"index-link-more\">\n          <Link to=\"/sheets/\">全部清单…</Link>\n        </span>\n      </section>\n      <section className=\"index-block\">\n        <h2 id=\"friends\">朋友</h2>\n        <div className=\"index-block-friends\">\n          {data.friends.childYaml.friends.map(friend => (\n            <CardFriend key={friend.name} friend={friend} />\n          ))}\n        </div>\n        <span className=\"index-link-more\">\n          <Link to=\"/friends\">详细…</Link>\n        </span>\n      </section>\n    </>\n  );\n};\n\nexport default IndexPage;\n"],"sourceRoot":""}