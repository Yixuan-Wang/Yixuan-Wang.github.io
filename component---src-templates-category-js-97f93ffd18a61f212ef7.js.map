{"version":3,"sources":["webpack:///./src/components/SEO.js","webpack:///./src/templates/category.js"],"names":["SEO","type","description","lang","meta","title","site","useStaticQuery","metaDescription","siteMetadata","siteTitle","htmlAttributes","name","content","property","withPrefix","concat","defaultProps","Category","pageContext","data","category","tagGroup","allMarkdownRemark","group","tags","className","map","tag","key","href","style","color","nodes","id","frontmatter","fields","slug","to"],"mappings":"4FAAA,iDAYA,SAASA,EAAT,GAAwD,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAMC,EAAS,EAATA,MACpCC,EAASC,yBAAe,YAAxBD,KAcFE,EAAkBN,GAAeI,EAAKG,aAAaP,YACnDQ,EAAYJ,EAAKG,aAAaJ,MAEpC,OACE,kBAAC,SAAD,CACEM,eAAgB,CACdR,QAEFE,MAAOA,EAAWA,EAAN,MAAiBK,EAAcA,EAC3CN,KAAM,CACJ,CACEQ,KAAK,cACLC,QAASL,GAEX,CACEM,SAAS,WACTD,QAASR,GAEX,CACES,SAAS,iBACTD,QAASL,GAEX,CACEM,SAAS,UACTD,QAASZ,GAEX,CACEa,SAAS,eACTD,QAASH,GAEX,CACEI,SAAS,WACTD,QAASE,qBAAW,eAEtBC,OAAOZ,KAKfJ,EAAIiB,aAAe,CACjBd,KAAK,UACLC,KAAM,GACNF,YAAY,GACZD,KAAK,UACLI,MAAM,IAUOL,O,kCCjFf,gGAKe,SAASkB,EAAT,GAA0C,IAAtBC,EAAqB,EAArBA,YAAaC,EAAQ,EAARA,KACtCC,EAAaF,EAAbE,SACFC,EAAWF,EAAKG,kBAAkBC,MAClCC,EAAOL,EAAKG,kBAAkBE,KAEpC,OACE,oCACE,kBAAC,IAAD,CAAKpB,MAAOgB,IACZ,4BAAKA,GACL,iCACE,wBAAIK,UAAU,eACXD,EAAKE,KAAI,SAAAC,GACR,OACE,wBAAIC,IAAKD,EAAKF,UAAU,oBACtB,uBACEA,UAAU,wBACVI,KAAI,IAAMF,EACVG,MAAO,CAAEC,MAAM,kBAEdJ,SAOZN,EAASK,KAAI,gBAAGC,EAAH,EAAGA,IAAKK,EAAR,EAAQA,MAAR,OACZ,6BAASJ,IAAKD,GACZ,wBAAIM,GAAIN,GAAMA,GACd,wBAAIF,UAAU,eACXO,EAAMN,KAAI,YAA8B,IAA3BQ,EAA0B,EAA1BA,YAAaC,EAAa,EAAbA,OACzB,OACE,wBAAIP,IAAKO,EAAOC,KAAMX,UAAU,oBAC9B,kBAAC,OAAD,CACEA,UAAU,wBACVY,GAAE,IAAMF,EAAOC,MAEdF,EAAY9B","file":"component---src-templates-category-js-97f93ffd18a61f212ef7.js","sourcesContent":["/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from 'react-helmet';\nimport { useStaticQuery, graphql, withPrefix } from 'gatsby';\n\nfunction SEO({ type, description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `,\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n  const siteTitle = site.siteMetadata.title;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title ? `${title} | ${siteTitle}` : siteTitle}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: type,\n        },\n        {\n          property: `og:site-name`,\n          content: siteTitle,\n        },\n        {\n          property: `og:image`,\n          content: withPrefix('/icon.png'),\n        },\n      ].concat(meta)}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  lang: `zh-Hans`,\n  meta: [],\n  description: ``,\n  type: `webpage`,\n  title: ``,\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n","import React from 'react';\nimport { graphql, Link } from 'gatsby';\n\nimport SEO from '../components/SEO';\n\nexport default function Category({ pageContext, data }) {\n  const { category } = pageContext;\n  const tagGroup = data.allMarkdownRemark.group;\n  const tags = data.allMarkdownRemark.tags;\n\n  return (\n    <>\n      <SEO title={category} />\n      <h1>{category}</h1>\n      <section>\n        <ul className=\"posts-group\">\n          {tags.map(tag => {\n            return (\n              <li key={tag} className=\"posts-group-item\">\n                <a\n                  className=\"posts-group-item-link\"\n                  href={`#${tag}`}\n                  style={{ color: `var(--clr-ac)` }}\n                >\n                  {tag}\n                </a>\n              </li>\n            );\n          })}\n        </ul>\n      </section>\n      {tagGroup.map(({ tag, nodes }) => (\n        <section key={tag}>\n          <h2 id={tag}>{tag}</h2>\n          <ul className=\"posts-group\">\n            {nodes.map(({ frontmatter, fields }) => {\n              return (\n                <li key={fields.slug} className=\"posts-group-item\">\n                  <Link\n                    className=\"posts-group-item-link\"\n                    to={`/${fields.slug}`}\n                  >\n                    {frontmatter.title}\n                  </Link>\n                </li>\n              );\n            })}\n          </ul>\n        </section>\n      ))}\n    </>\n  );\n}\n\nexport const query = graphql`\n  query($category: String!) {\n    allMarkdownRemark(\n      filter: { frontmatter: { category: { eq: $category } } }\n    ) {\n      tags: distinct(field: frontmatter___tags)\n      group(field: frontmatter___tags) {\n        tag: fieldValue\n        nodes {\n          frontmatter {\n            title\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}