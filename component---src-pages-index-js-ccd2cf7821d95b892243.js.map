{"version":3,"sources":["webpack:///./src/components/Chip.js","webpack:///./src/components/ArticleMeta.js","webpack:///./src/components/SEO.js","webpack:///./src/components/CardArticle.js","webpack:///./src/pages/index.js"],"names":["Chip","children","className","ArticleMeta","time","taxonomies","category","tags","keywords","style","display","marginRight","color","fontWeight","to","map","tag","key","keyword","SEO","type","description","lang","meta","title","site","useStaticQuery","metaDescription","siteMetadata","siteTitle","htmlAttributes","name","content","property","withPrefix","concat","defaultProps","CardArticle","article","frontmatter","date","padding","margin","fields","slug","excerpt","IndexPage","data","id","recentPosts","nodes","recentSheets","recentTalks"],"mappings":"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","file":"component---src-pages-index-js-ccd2cf7821d95b892243.js","sourcesContent":["import React from 'react';\n\nimport '../styles/components/chip.scss';\n\nexport default function Chip({ children }) {\n  return <span className=\"chip\">{children}</span>;\n}\n","import React from 'react';\nimport { Link } from 'gatsby';\nimport PropTypes from 'prop-types';\n\nimport Chip from '../components/Chip';\n\nfunction ArticleMeta({ time, taxonomies }) {\n  const { category, tags, keywords } = taxonomies;\n\n  return (\n    <span className=\"subtitle\" style={{ display: 'inline-block' }}>\n      <time style={{ marginRight: '1em' }}>{time}</time>\n      <span style={{ color: 'var(--clr-ac)', fontWeight: 'bold' }}>\n        <Chip>\n          <Link to={`../../categories/${category}`}>{category}</Link>\n        </Chip>\n      </span>\n      <span>\n        {tags?.map(tag => (\n          <Chip key={tag}>\n            <Link to={`../../categories/${category}`}>{`@${tag}`}</Link>\n          </Chip>\n        ))}\n      </span>\n      <span style={{ color: 'var(--clr-dm)' }}>\n        {keywords?.map(keyword => (\n          <Chip key={keyword}>{`#${keyword}`}</Chip>\n        ))}\n      </span>\n    </span>\n  );\n}\n\nArticleMeta.propTypes = {\n  time: PropTypes.string,\n  taxonomies: PropTypes.shape({\n    category: PropTypes.string,\n    tags: PropTypes.arrayOf(PropTypes.string),\n    keywords: PropTypes.arrayOf(PropTypes.string),\n  }),\n};\n\nexport default ArticleMeta;\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from 'react-helmet';\nimport { useStaticQuery, graphql, withPrefix } from 'gatsby';\n\nfunction SEO({ type, description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `,\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n  const siteTitle = site.siteMetadata.title;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title ? `${title} | ${siteTitle}` : siteTitle}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: type,\n        },\n        {\n          property: `og:site-name`,\n          content: siteTitle,\n        },\n        {\n          property: `og:image`,\n          content: withPrefix('/icon.png'),\n        },\n      ].concat(meta)}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  lang: `zh-Hans`,\n  meta: [],\n  description: ``,\n  type: `webpage`,\n  title: ``,\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n","import React from 'react';\nimport { Link } from 'gatsby';\n\nimport ArticleMeta from '../components/ArticleMeta';\n\nexport default function CardArticle({ article }) {\n  const { title, date, category, tags, keywords } = article.frontmatter;\n  const time = (\n    <span>\n      {date}\n      {/* {post.frontmatter.date == post.fields.modifiedTime\n        ? ''\n        : ` → ${post.fields.modifiedTime}`} */}\n    </span>\n  );\n\n  return (\n    <section style={{ padding: '.25em .5em' }}>\n      <h3 style={{ margin: '0' }}>\n        <Link to={`/${article.fields.slug}`}>{title}</Link>\n      </h3>\n      <p style={{ margin: '0' }}>{article.excerpt}</p>\n      <ArticleMeta time={time} taxonomies={{ category, tags, keywords }} />\n    </section>\n  );\n}\n","import React from 'react';\nimport { graphql, Link } from 'gatsby';\n\nimport '../styles/pages/index.scss';\n\nimport SEO from '../components/SEO';\nimport CardArticle from '../components/CardArticle';\n\nexport const query = graphql`\n  fragment Article on MarkdownRemark {\n    id\n    excerpt\n    fields {\n      slug\n    }\n    frontmatter {\n      tags\n      keywords\n      title\n      category\n      date(formatString: \"YYYY/MM/DD\")\n    }\n  }\n  query QueryIndex {\n    site {\n      siteMetadata {\n        title\n        description\n      }\n    }\n    recentPosts: allMarkdownRemark(\n      limit: 3\n      filter: { fields: { quarter: { eq: \"posts\" } } }\n      sort: { fields: frontmatter___date, order: DESC }\n    ) {\n      nodes {\n        ...Article\n      }\n    }\n    recentSheets: allMarkdownRemark(\n      limit: 1\n      filter: { fields: { quarter: { eq: \"sheets\" } } }\n      sort: { fields: frontmatter___date, order: DESC }\n    ) {\n      nodes {\n        ...Article\n      }\n    }\n    recentTalks: allMarkdownRemark(\n      limit: 1\n      filter: { fields: { quarter: { eq: \"talks\" } } }\n      sort: { fields: frontmatter___date, order: DESC }\n    ) {\n      nodes {\n        ...Article\n      }\n    }\n  }\n`;\n\nconst IndexPage = ({ data }) => {\n  const { siteMetadata } = data.site;\n  return (\n    <>\n      <SEO title=\"\" />\n      <h1 className=\"title\">{siteMetadata.title}</h1>\n      <p className=\"subtitle description\">{siteMetadata.description}</p>\n      <section className=\"index-block\">\n        <h2 id=\"recent-posts\">最近的文章</h2>\n        {data.recentPosts.nodes.map(article => (\n          <CardArticle key={article.id} article={article} />\n        ))}\n        <span className=\"index-link-more\">\n          <Link to=\"/posts/\">全部…</Link>\n        </span>\n      </section>\n      <section className=\"index-block\">\n        <h2 id=\"recent-sheets\">最近的清单</h2>\n        {data.recentSheets.nodes.map(article => (\n          <CardArticle key={article.id} article={article} />\n        ))}\n        <span className=\"index-link-more\">\n          <Link to=\"/sheets/\">全部…</Link>\n        </span>\n      </section>\n      <section className=\"index-block\">\n        <h2 id=\"recent-talks\">最近的言论</h2>\n        {data.recentTalks.nodes.map(article => (\n          <CardArticle key={article.id} article={article} />\n        ))}\n        <span className=\"index-link-more\">\n          <Link to=\"/talks/\">全部…</Link>\n        </span>\n      </section>\n    </>\n  );\n};\n\nexport default IndexPage;\n"],"sourceRoot":""}