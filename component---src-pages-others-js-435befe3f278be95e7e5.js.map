{"version":3,"sources":["webpack://pak/./src/components/SEO.js","webpack://pak/./src/pages/others.js"],"names":["SEO","type","description","lang","meta","title","site","useStaticQuery","metaDescription","siteMetadata","siteTitle","htmlAttributes","name","content","property","withPrefix","concat","defaultProps","categories","data","categoriesPages","nodes","map","node","context","category","className","Link","to","key"],"mappings":"gIAYA,SAASA,EAAT,GAAwD,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAMC,EAAS,EAATA,MACpCC,GAASC,oBAAe,YAAxBD,KAcFE,EAAkBN,GAAeI,EAAKG,aAAaP,YACnDQ,EAAYJ,EAAKG,aAAaJ,MAEpC,OACE,gBAAC,IAAD,CACEM,eAAgB,CACdR,QAEFE,MAAOA,EAAWA,EAAN,MAAiBK,EAAcA,EAC3CN,KAAM,CACJ,CACEQ,KAAK,cACLC,QAASL,GAEX,CACEM,SAAS,WACTD,QAASR,GAEX,CACES,SAAS,iBACTD,QAASL,GAEX,CACEM,SAAS,UACTD,QAASZ,GAEX,CACEa,SAAS,eACTD,QAASH,GAEX,CACEI,SAAS,WACTD,SAASE,gBAAW,eAEtBC,OAAOZ,KAKfJ,EAAIiB,aAAe,CACjBd,KAAK,UACLC,KAAM,GACNF,YAAY,GACZD,KAAK,UACLI,MAAM,IAUR,O,2EC9BA,UAhCuB,SAAC,GAAc,IAE9Ba,EAF6B,EAAXC,KAChBC,gBAC2BC,MAAMC,KAAI,SAAAC,GAAI,OAAIA,EAAKC,QAAQC,YAClE,OACE,2BACE,gBAAC,IAAD,CAAKpB,MAAM,OACX,sBAAIqB,UAAU,SAAd,MACA,+BACE,iCACA,sBAAIA,UAAU,eACZ,sBAAIA,UAAU,oBACZ,gBAAC,EAAAC,KAAD,CAAMC,GAAG,UAAT,OAEF,sBAAIF,UAAU,oBACZ,gBAAC,EAAAC,KAAD,CAAMC,GAAG,YAAT,SAIN,+BACE,gCACA,sBAAIF,UAAU,eACXR,EAAWI,KAAI,SAAAG,GAAQ,OACtB,sBAAII,IAAKJ,EAAUC,UAAU,oBAC3B,gBAAC,EAAAC,KAAD,CAAMC,GAAE,eAAiBH,GAAzB,IAAuCA","file":"component---src-pages-others-js-435befe3f278be95e7e5.js","sourcesContent":["/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from 'react-helmet';\nimport { useStaticQuery, graphql, withPrefix } from 'gatsby';\n\nfunction SEO({ type, description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `,\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n  const siteTitle = site.siteMetadata.title;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title ? `${title} | ${siteTitle}` : siteTitle}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: type,\n        },\n        {\n          property: `og:site-name`,\n          content: siteTitle,\n        },\n        {\n          property: `og:image`,\n          content: withPrefix('/icon.png'),\n        },\n      ].concat(meta)}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  lang: `zh-Hans`,\n  meta: [],\n  description: ``,\n  type: `webpage`,\n  title: ``,\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n","import React from 'react';\nimport { graphql, Link } from 'gatsby';\n\nimport SEO from '../components/SEO';\n\nexport const query = graphql`\n  query QueryListOthers {\n    categoriesPages: allSitePage(\n      filter: { context: { category: { ne: null } } }\n    ) {\n      nodes {\n        context {\n          category\n        }\n      }\n    }\n  }\n`;\n\nconst ListOthersPage = ({ data }) => {\n  const { categoriesPages } = data;\n  const categories = categoriesPages.nodes.map(node => node.context.category);\n  return (\n    <div>\n      <SEO title=\"其他\" />\n      <h1 className=\"title\">其他</h1>\n      <section>\n        <h2>辅助页</h2>\n        <ul className=\"posts-group\">\n          <li className=\"posts-group-item\">\n            <Link to=\"/about\">关于</Link>\n          </li>\n          <li className=\"posts-group-item\">\n            <Link to=\"/friends\">朋友</Link>\n          </li>\n        </ul>\n      </section>\n      <section>\n        <h2>类别</h2>\n        <ul className=\"posts-group\">\n          {categories.map(category => (\n            <li key={category} className=\"posts-group-item\">\n              <Link to={`/categories/${category}`}>@{category}</Link>\n            </li>\n          ))}\n        </ul>\n      </section>\n    </div>\n  );\n};\n\nexport default ListOthersPage;\n"],"sourceRoot":""}