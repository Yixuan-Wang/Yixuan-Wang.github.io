{"version":3,"sources":["webpack:///./src/templates/sheet.js","webpack:///./src/components/ArticleFront.js","webpack:///./src/components/Chip.js","webpack:///./src/components/ArticleMeta.js","webpack:///./src/components/SEO.js"],"names":["Sheet","sheet","data","markdownRemark","title","frontmatter","type","article","dangerouslySetInnerHTML","__html","html","ArticleFront","date","category","tags","keywords","className","style","marginBottom","time","taxonomies","Chip","children","ArticleMeta","display","marginRight","color","fontWeight","to","map","tag","key","keyword","SEO","description","lang","meta","site","useStaticQuery","metaDescription","siteMetadata","siteTitle","htmlAttributes","name","content","property","withPrefix","concat","defaultProps"],"mappings":"8FAAA,gGAMe,SAASA,EAAT,GAA0B,IACjCC,EADgC,EAARC,KACXC,eAEnB,OACE,oCACE,kBAAC,IAAD,CAAKC,MAAOH,EAAMI,YAAYD,MAAOE,KAAK,YAC1C,kBAAC,IAAD,CAAcC,QAASN,IACvB,6BAASO,wBAAyB,CAAEC,OAAQR,EAAMS,W,oCCbxD,uEAIe,SAASC,EAAT,GAAoC,IAAD,IAAXJ,QACqBF,YAAlDD,EADwC,EACxCA,MAAOQ,EADiC,EACjCA,KAAMC,EAD2B,EAC3BA,SAAUC,EADiB,EACjBA,KAAMC,EADW,EACXA,SAErC,OACE,oCACE,wBAAIC,UAAU,QAAQC,MAAO,CAAEC,aAAc,MAC1Cd,GAEH,kBAAC,IAAD,CACEY,UAAU,WACVG,KAAMP,EACNQ,WAAY,CAAEP,WAAUC,OAAMC,iB,mFCXvB,SAASM,EAAT,GAA6B,IAAbC,EAAY,EAAZA,SAC7B,OAAO,0BAAMN,UAAU,QAAQM,GCqClBC,IApCf,YAA4C,IAArBJ,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,WACnBP,EAA6BO,EAA7BP,SAAUC,EAAmBM,EAAnBN,KAAMC,EAAaK,EAAbL,SAExB,OACE,0BAAMC,UAAU,WAAWC,MAAO,CAAEO,QAAS,iBAC3C,0BAAMP,MAAO,CAAEQ,YAAa,QAAUN,GACtC,0BAAMF,MAAO,CAAES,MAAO,gBAAiBC,WAAY,SACjD,kBAACN,EAAD,KACE,kBAAC,OAAD,CAAMO,GAAE,oBAAsBf,GAAaA,KAG/C,8BACGC,aADH,EACGA,EAAMe,KAAI,SAAAC,GAAG,OACZ,kBAACT,EAAD,CAAMU,IAAKD,GACT,kBAAC,OAAD,CAAMF,GAAE,oBAAsBf,GAA9B,IAA+CiB,QAIrD,0BAAMb,MAAO,CAAES,MAAO,kBACnBX,aADH,EACGA,EAAUc,KAAI,SAAAG,GAAO,OACpB,kBAACX,EAAD,CAAMU,IAAKC,GAAX,IAAyBA,U,kCC1BnC,iDAYA,SAASC,EAAT,GAAwD,IAAzC3B,EAAwC,EAAxCA,KAAM4B,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAMhC,EAAS,EAATA,MACpCiC,EAASC,yBAAe,YAAxBD,KAcFE,EAAkBL,GAAeG,EAAKG,aAAaN,YACnDO,EAAYJ,EAAKG,aAAapC,MAEpC,OACE,kBAAC,SAAD,CACEsC,eAAgB,CACdP,QAEF/B,MAAOA,EAAWA,EAAN,MAAiBqC,EAAcA,EAC3CL,KAAM,CACJ,CACEO,KAAK,cACLC,QAASL,GAEX,CACEM,SAAS,WACTD,QAASxC,GAEX,CACEyC,SAAS,iBACTD,QAASL,GAEX,CACEM,SAAS,UACTD,QAAStC,GAEX,CACEuC,SAAS,eACTD,QAASH,GAEX,CACEI,SAAS,WACTD,QAASE,qBAAW,eAEtBC,OAAOX,KAKfH,EAAIe,aAAe,CACjBb,KAAK,UACLC,KAAM,GACNF,YAAY,GACZ5B,KAAK,UACLF,MAAM,IAUO6B,O","file":"component---src-templates-sheet-js-3d57b9025ff7ec98f848.js","sourcesContent":["import React from 'react';\nimport { graphql } from 'gatsby';\n\nimport SEO from '../components/SEO';\nimport ArticleFront from '../components/ArticleFront';\n\nexport default function Sheet({ data }) {\n  const sheet = data.markdownRemark;\n\n  return (\n    <>\n      <SEO title={sheet.frontmatter.title} type=\"article\" />\n      <ArticleFront article={sheet} />\n      <article dangerouslySetInnerHTML={{ __html: sheet.html }} />\n    </>\n  );\n}\n\nexport const query = graphql`\n  query QueryCreateSheet($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      frontmatter {\n        title\n        date(formatString: \"YYYY/MM/DD\")\n        category\n        tags\n        keywords\n      }\n      fields {\n        modifiedTime(formatString: \"YYYY/MM/DD\")\n      }\n    }\n  }\n`;\n","import React from 'react';\n\nimport ArticleMeta from '../components/ArticleMeta';\n\nexport default function ArticleFront({ article }) {\n  const { title, date, category, tags, keywords } = article.frontmatter;\n\n  return (\n    <>\n      <h1 className=\"title\" style={{ marginBottom: '0' }}>\n        {title}\n      </h1>\n      <ArticleMeta\n        className=\"subtitle\"\n        time={date}\n        taxonomies={{ category, tags, keywords }}\n      />\n    </>\n  );\n}\n","import React from 'react';\n\nimport '../styles/components/chip.scss';\n\nexport default function Chip({ children }) {\n  return <span className=\"chip\">{children}</span>;\n}\n","import React from 'react';\nimport { Link } from 'gatsby';\nimport PropTypes from 'prop-types';\n\nimport Chip from '../components/Chip';\n\nfunction ArticleMeta({ time, taxonomies }) {\n  const { category, tags, keywords } = taxonomies;\n\n  return (\n    <span className=\"subtitle\" style={{ display: 'inline-block' }}>\n      <time style={{ marginRight: '1em' }}>{time}</time>\n      <span style={{ color: 'var(--clr-ac)', fontWeight: 'bold' }}>\n        <Chip>\n          <Link to={`../../categories/${category}`}>{category}</Link>\n        </Chip>\n      </span>\n      <span>\n        {tags?.map(tag => (\n          <Chip key={tag}>\n            <Link to={`../../categories/${category}`}>{`@${tag}`}</Link>\n          </Chip>\n        ))}\n      </span>\n      <span style={{ color: 'var(--clr-dm)' }}>\n        {keywords?.map(keyword => (\n          <Chip key={keyword}>{`#${keyword}`}</Chip>\n        ))}\n      </span>\n    </span>\n  );\n}\n\nArticleMeta.propTypes = {\n  time: PropTypes.string,\n  taxonomies: PropTypes.shape({\n    category: PropTypes.string,\n    tags: PropTypes.arrayOf(PropTypes.string),\n    keywords: PropTypes.arrayOf(PropTypes.string),\n  }),\n};\n\nexport default ArticleMeta;\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from 'react-helmet';\nimport { useStaticQuery, graphql, withPrefix } from 'gatsby';\n\nfunction SEO({ type, description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `,\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n  const siteTitle = site.siteMetadata.title;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title ? `${title} | ${siteTitle}` : siteTitle}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: type,\n        },\n        {\n          property: `og:site-name`,\n          content: siteTitle,\n        },\n        {\n          property: `og:image`,\n          content: withPrefix('/icon.png'),\n        },\n      ].concat(meta)}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  lang: `zh-Hans`,\n  meta: [],\n  description: ``,\n  type: `webpage`,\n  title: ``,\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n"],"sourceRoot":""}