{"componentChunkName":"component---src-templates-talk-js","path":"/talks/cpp-practice-of-programming","result":{"data":{"markdownRemark":{"html":"<p>程设课的 C++ <ruby>学<rt>cǎi</rt>习<rt>kēng</rt></ruby>笔记。</p>\n<!-- more -->\n<h2 id=\"C11-lambda-表达式作为返回值\">C++11 lambda 表达式作为返回值</h2>\n<p>C++ 提供了 <code>auto</code> 关键字作自动类型推断，但在 C++11 中不能自动推断函数的返回值类型，必须通过 <code>decltype()</code> 指明。而 lambda 表达式没有具名类型，因此需要通过包装在<strong>函数对象</strong>（<code>function</code>）中来解决。</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;functional></span> <span class=\"token comment\">// `std::function` 在 &lt;functional> 头文件里</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\nfunction<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code>function&#x3C;></code> 类模板接收一个参数，函数的类型。仿照普通函数的类型（<code>return_type(arg_type,...)</code>）写即可。</p>\n<p>当然，在 C++14 及以后可以直接写成：</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">auto</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"程设 C++ 笔记","date":"2021/05/05","category":"信息学","tags":["编程语言","C++"],"keywords":null},"fields":{"modifiedTime":null}}},"pageContext":{"slug":"talks/cpp-practice-of-programming","quarter":"talks"}},"staticQueryHashes":["2243046057","63159454"]}