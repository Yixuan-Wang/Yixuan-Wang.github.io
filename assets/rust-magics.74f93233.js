import{_ as l}from"./TheArticle.c4091ab0.js";import{o,j as p}from"./app.49960b74.js";const y="In Rust We Thrust",i="2022-07-30T00:00:00.000Z",F="comp",A=["rust","pl"],d={setup(e,{expose:n}){const s={title:"In Rust We Thrust",date:"2022-07-30T00:00:00.000Z",category:"comp",tags:["rust","pl"]};return n({frontmatter:s}),(t,c)=>{const a=l;return o(),p(a,{frontmatter:s,inner:`<div><p>Rust \u8BED\u8A00\u7684\u4E00\u4E9B\u5947\u6280\u6DEB\u5DE7\u3002</p>
<!-- more -->
<article note>
<h2 id="\u5B57\u7B26\u4E32\u57FA\u4E8E-unicode-\u5B57\u7B26\u7684\u5207\u7247" tabindex="-1">\u5B57\u7B26\u4E32\u57FA\u4E8E Unicode \u5B57\u7B26\u7684\u5207\u7247</h2>
<p>Rust \u7684\u5B57\u7B26\u4E32\uFF08<code>&amp;str</code>, <code>String</code>\uFF09\u672C\u8D28\u4E0A\u90FD\u662F\u6309\u7167 UTF-8 \u7F16\u7801\u7684 8 \u4F4D\u65E0\u7B26\u53F7\u6570\u6784\u6210\u7684\u5E8F\u5217\uFF0C\u800C UTF-8 \u4F5C\u4E3A\u4E00\u79CD\u53D8\u957F\u7F16\u7801\uFF0C\u662F\u6CA1\u6CD5\u5728 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span> \u65F6\u95F4\u5185\u67E5\u8BE2\u5230\u5B83\u7F16\u7801\u7684\u7279\u5B9A\u4E0B\u6807\u7684 Unicode \u5B57\u7B26\u7684\uFF0C\u800C <a href="https://doc.rust-lang.org/stable/book/ch08-02-strings.html#bytes-and-scalar-values-and-grapheme-clusters-oh-my" target="_blank" rel="noopener"><em>The Book</em> \u6307\u51FA</a>\u5728 Rust \u4E2D\u7D22\u5F15\u8FD0\u7B97\u7B26 <code>[]</code> \u5E94\u8BE5\u662F <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span> \u7684\uFF0C\u56E0\u6B64 <code>String</code> \u4E0D\u652F\u6301\u901A\u8FC7\u7D22\u5F15\u76F4\u63A5\u8BFB\u53D6\u5B57\u7B26\uFF08<code>String</code> \u672C\u8EAB\u4E0D\u662F <code>char</code> \u7684\u5E8F\u5217\uFF0C\u6240\u4EE5\u4E5F\u6CA1\u6CD5\u6309\u7167 <code>ops::Index::index</code> \u7684\u7B7E\u540D\u8FD4\u56DE <code>&amp;char</code> \u7C7B\u578B\uFF09\uFF0C\u5207\u7247\u64CD\u4F5C\u4E5F\u662F\u4EE5 UTF-8 \u5B57\u8282\u6570\u4F5C\u4E3A\u7D22\u5F15\u8FDB\u884C\u5207\u7247\u3002</p>
<p>\u4E0D\u8FC7\uFF0C<code>str</code> \u63D0\u4F9B\u4E86 <code>.chars()</code> \u548C <code>.char_indices()</code> \u65B9\u6CD5\uFF0C\u5206\u522B\u8FD4\u56DE <code>char</code> \u548C <code>(usize, char)</code> \u7684\u8FED\u4EE3\u5668\uFF0C\u8FD4\u56DE\u7684\u90FD\u662F Unicode \u5B57\u7B26 <code>char</code>\uFF0C\u56E0\u6B64\u53EF\u4EE5\u5229\u7528\u8FD9\u4E24\u4E2A\u8FED\u4EE3\u5668\u505A\u7D22\u5F15\u548C\u5207\u7247\u3002</p>
<pre class="shiki" style="background-color: #282c34"><code><span class="line"><span style="color: #C678DD">let</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">index</span><span style="color: #ABB2BF">: </span><span style="color: #E5C07B">usize</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #C678DD">let</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">my_string</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&quot;\u4F60\u597D Rust!&quot;</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #C678DD">let</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">ch</span><span style="color: #ABB2BF">: </span><span style="color: #E5C07B">Option</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">char</span><span style="color: #ABB2BF">&gt; </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">my_string</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">chars</span><span style="color: #ABB2BF">().</span><span style="color: #61AFEF">nth</span><span style="color: #ABB2BF">(</span><span style="color: #E06C75">index</span><span style="color: #ABB2BF">);</span><span style="color: #7F848E; font-style: italic"> // Some(&#39;\u597D&#39;)</span></span>
<span class="line"></span></code></pre>
<p>\u5207\u7247\u5219\u66F4\u590D\u6742\u4E00\u4E9B\uFF1A</p>
<pre class="shiki" style="background-color: #282c34"><code><span class="line"><span style="color: #61AFEF">assert!</span><span style="color: #ABB2BF">(</span></span>
<span class="line"><span style="color: #ABB2BF">  </span><span style="color: #E06C75">index</span><span style="color: #ABB2BF">.end </span><span style="color: #56B6C2">&gt;=</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">index</span><span style="color: #ABB2BF">.start,</span></span>
<span class="line"><span style="color: #ABB2BF">  </span><span style="color: #98C379">&quot;Start index should have been less than end index, but {} is not less than {}&quot;</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF">  </span><span style="color: #E06C75">index</span><span style="color: #ABB2BF">.start,</span></span>
<span class="line"><span style="color: #ABB2BF">  </span><span style="color: #E06C75">index</span><span style="color: #ABB2BF">.end</span></span>
<span class="line"><span style="color: #ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">let</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">mut</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">it</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">my_string</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">char_indices</span><span style="color: #ABB2BF">().</span><span style="color: #61AFEF">skip</span><span style="color: #ABB2BF">(</span><span style="color: #E06C75">index</span><span style="color: #ABB2BF">.start).</span><span style="color: #61AFEF">peekable</span><span style="color: #ABB2BF">();</span><span style="color: #7F848E; font-style: italic"> // \u5229\u7528 Peek \u622A\u53D6 start \u4F4D\u7F6E</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">let</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">start</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">match</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">it</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">peek</span><span style="color: #ABB2BF">() {</span></span>
<span class="line"><span style="color: #ABB2BF">  </span><span style="color: #E5C07B">Some</span><span style="color: #ABB2BF">((</span><span style="color: #E06C75">idx</span><span style="color: #ABB2BF">, </span><span style="color: #E06C75">_</span><span style="color: #ABB2BF">)) =&gt; *</span><span style="color: #E06C75">idx</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF">  </span><span style="color: #E5C07B">None</span><span style="color: #ABB2BF"> =&gt; </span><span style="color: #61AFEF">panic!</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;Start index {} is out of bounds&quot;</span><span style="color: #ABB2BF">, </span><span style="color: #E06C75">index</span><span style="color: #ABB2BF">.start),</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">let</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">end</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">match</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">it</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">take</span><span style="color: #ABB2BF">(</span><span style="color: #E06C75">index</span><span style="color: #ABB2BF">.end - </span><span style="color: #E06C75">index</span><span style="color: #ABB2BF">.start + </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">).</span><span style="color: #61AFEF">last</span><span style="color: #ABB2BF">() {</span></span>
<span class="line"><span style="color: #ABB2BF">  </span><span style="color: #E5C07B">Some</span><span style="color: #ABB2BF">((</span><span style="color: #E06C75">idx</span><span style="color: #ABB2BF">, </span><span style="color: #E06C75">_</span><span style="color: #ABB2BF">)) =&gt; </span><span style="color: #E06C75">idx</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF">  </span><span style="color: #E5C07B">None</span><span style="color: #ABB2BF"> =&gt; </span><span style="color: #E06C75">my_string</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">len</span><span style="color: #ABB2BF">(),</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// safe</span></span>
<span class="line"><span style="color: #C678DD">let</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">safe_slice</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> &amp;</span><span style="color: #E06C75">my_string</span><span style="color: #ABB2BF">[</span><span style="color: #E06C75">start</span><span style="color: #ABB2BF">..</span><span style="color: #E06C75">end</span><span style="color: #ABB2BF">];</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// unsafe</span></span>
<span class="line"><span style="color: #C678DD">let</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">unsafe_slice</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">unsafe</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75">my_string</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">get_unchecked</span><span style="color: #ABB2BF">(</span><span style="color: #E06C75">start</span><span style="color: #ABB2BF">..</span><span style="color: #E06C75">end</span><span style="color: #ABB2BF">) };</span></span>
<span class="line"></span></code></pre>
<p>\u8FD9\u4E2A\u65B9\u6CD5\u53EA\u9700\u8981\u4E00\u6B21\u8C03\u7528 <code>.char_indices()</code>\uFF0C\u4E0D\u9700\u8981\u5806\u4E0A\u5206\u914D\u4E5F\u4E0D\u9700\u8981\u904D\u5386\u6574\u4E2A\u5B57\u7B26\u4E32\uFF0C\u6BD4 <a href="https://github.com/coastalwhite/utf8_slice" target="_blank" rel="noopener"><code>utf8_slice</code></a> \u8FD9\u4E2A crate \u7684\u5B9E\u73B0\u5FEB\u4E00\u4E9B\u3002</p>
<pre class="shiki" style="background-color: #282c34"><code><span class="line"><span style="color: #abb2bf">test slice_my_snippet            ... bench:          12 ns/iter (+/- 1)
test slice_with_byte_index       ... bench:           0 ns/iter (+/- 0)
test slice_with_utf8_slice_crate ... bench:         121 ns/iter (+/- 16)
</span></span></code></pre>
</article>
</div>`})}}};export{F as category,i as date,d as default,A as tags,y as title};
